<?xml version="1.0" encoding="UTF-8"?>
<!--
    status : 这个用于设置log4j2自身内部的信息输出,可以不设置,当设置成trace时,会看到log4j2内部各种详细输出
    monitorInterval : Log4j能够自动检测修改配置文件和重新配置本身, 设置间隔秒数。
    configure.status 为设置日志输出级别,级别如下：OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL
-->
<configuration status="warn" monitorInterval="1000">
    <Properties>
        <!-- 配置日志文件输出目录 -->
        <!--${web:rootDir}/app.log-->
        <Property name="APP_NAME">flea-log</Property>
        <Property name="LOG_HOME">./log/${APP_NAME}</Property>
        <Property name="LOG_NAME">${APP_NAME}</Property>
    </Properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!-- 控制台只输出level及以上级别的信息(onMatch),其他的直接拒绝(onMismatch) -->
            <ThresholdFilter level="TRACE" onMatch="ACCEPT" onMismatch="DENY"/>
            <!-- 输出日志的格式 -->
            <PatternLayout charset="UTF-8" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %l - %m%n"/>
        </Console>

        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="./log/test.log" append="false">
            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
        </File>

        <!-- DEBUG日志格式 -->
        <!-- 打印所有debug及以下级别的信息, 每次大小超过size会自动存入按年份-月份建立的文件夹下面并进行压缩, 作为存档-->
        <RollingFile name="service_debug_appender" fileName="${LOG_HOME}/${LOG_NAME}.debug"
                     filePattern="${LOG_HOME}/${LOG_NAME}.log.%d{yyyy-MM-dd}-%i" append="true" immediateFlush="true">
            <Filters>
                <!--<ThresholdFilter level="info" onMatch="DENY" onMismatch="NEUTRAL"/>-->
                <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!--
                %d{yyyy-MM-dd HH:mm:ss, SSS} : 日志生产时间
                %p : 日志输出格式
                %c : logger的名称
                %m : 日志内容, 即 logger.info("message")
                %n : 换行符
                %C : Java类名
                %L : 日志输出所在行数
                %M : 日志输出所在方法名
                hostName : 本地机器名
                hostAddress : 本地ip地址
             -->
            <PatternLayout charset="UTF-8">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %class{36} %L %M -- %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <!-- 每天创建一个日志文件 -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
        </RollingFile>

        <!-- INFO 日志格式 -->
        <RollingFile name="service_info_appender" fileName="${LOG_HOME}/${LOG_NAME}.info"
                     filePattern="${LOG_HOME}/${LOG_NAME}.info.%d{yyyy-MM-dd}-%i" append="true" immediateFlush="true">
            <Filters>
                <!--<ThresholdFilter level="warn" onMatch="DENY" onMismatch="NEUTRAL"/>-->
                <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout charset="UTF-8">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %class{36} %L %M -- %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
        </RollingFile>

        <!-- warn日志格式 -->
        <RollingFile name="service_warn_appender" fileName="${LOG_HOME}/${LOG_NAME}.warn"
                     filePattern="${LOG_HOME}/${LOG_NAME}.warn.%d{yyyy-MM-dd}-%i" append="true" immediateFlush="true">
            <Filters>
                <!-- error及以上级别的日志, 在序列表里的下个过滤器过接着处理-->
                <!--<ThresholdFilter level="error" onMatch="DENY" onMismatch="NEUTRAL"/>-->
                <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout charset="UTF-8">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %class{36} %L %M -- %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
        </RollingFile>

        <!-- error日志格式 -->
        <RollingFile name="service_error_appender" fileName="${LOG_HOME}/${LOG_NAME}.error"
                     filePattern="${LOG_HOME}/${LOG_NAME}.error.%d{yyyy-MM-dd}-%i" append="true" immediateFlush="true">
            <Filters>
                <!--低于 error 级别的日志被拒绝-->
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <PatternLayout charset="UTF-8">
                <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%-5level] %class{36} %L %M -- %msg%xEx%n</pattern>
            </PatternLayout>
            <Policies>
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <SizeBasedTriggeringPolicy size="100MB"/>
            </Policies>
        </RollingFile>

    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!-- Root: 用来指定项目的根日志(配置日志的根节点), 如果没有单独指定Logger, 那么就会默认使用该Root日志输出 -->
        <Root level="debug">
            <appender-ref ref="Console"/>
            <appender-ref ref="service_debug_appender"/>
            <appender-ref ref="service_info_appender"/>
            <appender-ref ref="service_warn_appender"/>
            <appender-ref ref="service_error_appender"/>
        </Root>

        <!-- 配置项目Logger -->
        <!-- additivity=”true” 表示子日志所获得的日志也会在父日志中出现, 即使 父日志的 level 远高于子日志的 level-->
        <Logger name="org.fiend" additivity="false" level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="service_debug_appender"/>
            <appender-ref ref="service_info_appender"/>
            <appender-ref ref="service_warn_appender"/>
            <appender-ref ref="service_error_appender"/>
        </Logger>

        <!-- 第三方日志系统 -->
        <!--过滤掉spring和hibernate的一些无用的debug信息-->
        <logger name="org.springframework" level="info"/>
        <!--<logger name="org.springframework.core" level="warn"/>-->
        <!--<logger name="org.springframework.beans" level="warn"/>-->
        <!--<logger name="org.springframework.context" level="warn"/>-->
        <logger name="io.netty" level="warn"/>
        <logger name="org.apache.http" level="warn"/>
        <logger name="org.mongodb.driver" level="INFO"/>
    </loggers>

</configuration>